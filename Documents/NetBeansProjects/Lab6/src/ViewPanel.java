import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Zoher
 */
public final class ViewPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewPanel
     */
    JPanel bottomPanel;
    private ArrayList<User> users;
    private User selectedUser;
    public ViewPanel(JPanel bottomPanel1) {
        initComponents();
        this.bottomPanel = bottomPanel;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        ageTextField = new javax.swing.JTextField();
        savebutton = new javax.swing.JButton();
        editbutton = new javax.swing.JButton();
        deletebutton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        userDataTable = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        jLabel1.setText("View");

        jLabel2.setText("Name");

        jLabel3.setText("Age");

        savebutton.setText("Save");
        savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebuttonActionPerformed(evt);
            }
        });

        editbutton.setText("Edit");
        editbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editbuttonActionPerformed(evt);
            }
        });

        deletebutton.setText("Delete");
        deletebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebuttonActionPerformed(evt);
            }
        });

        userDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Name", "Age"
            }
        ));
        jScrollPane2.setViewportView(userDataTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(ageTextField)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deletebutton)
                                    .addComponent(savebutton)
                                    .addComponent(editbutton))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(207, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(25, 25, 25)
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(ageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(savebutton)
                        .addGap(37, 37, 37)
                        .addComponent(editbutton)
                        .addGap(37, 37, 37)
                        .addComponent(deletebutton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editbuttonActionPerformed
try{
            
            int selectedRowIndex = userDataTable.getSelectedRow();
            if (selectedRowIndex<0){
                throw new IllegalArgumentException("Select any one user to edit");
            }
            
            else{
                
                
                selectedUser = users.get(selectedRowIndex);
                nameTextField.setText(selectedUser.getName());
                ageTextField.setText(String.valueOf(selectedUser.getAge()));
                
                
            }
        }
        
        catch(IllegalArgumentException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Selection Error", JOptionPane.ERROR_MESSAGE);
        }       
// TODO add your handling code here:
    }//GEN-LAST:event_editbuttonActionPerformed

    private void deletebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebuttonActionPerformed
try{
            int selectedIndex = userDataTable.getSelectedRow();
            if(selectedIndex == -1 ){

                throw new IllegalArgumentException("Select any one user details to delete");

            }
            else{

                DefaultTableModel model = (DefaultTableModel) userDataTable.getModel();              
                selectedUser = users.get(selectedIndex);
                DatabaseConnector.deleteUser(selectedUser);
                JOptionPane.showMessageDialog(null, "User Data Successfully Deleted","Successfully Deleted",JOptionPane.INFORMATION_MESSAGE);
                clearFields();
                populateTable();


            }

        }
        catch (IllegalArgumentException e){

            JOptionPane.showMessageDialog(this, e.getMessage(),"Data Selection Error",JOptionPane.ERROR_MESSAGE);
        }
        
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage(),"Data Deletion Error",JOptionPane.ERROR_MESSAGE);
            
        }
// TODO add your handling code here:
    }//GEN-LAST:event_deletebuttonActionPerformed

    private void savebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebuttonActionPerformed
        try{
            
            if (selectedUser == null){
                throw new IllegalArgumentException("Not Selected any user to edit");
                
            }
            else{
                User newUser = new User();
                newUser.setName(nameTextField.getText());
                newUser.setAge(Integer.parseInt(ageTextField.getText()));
                DatabaseConnector.editUser(selectedUser,newUser);
                if ((selectedUser.getName().equals(newUser.getName())) && (selectedUser.getAge() == newUser.getAge())){

                    throw new IllegalArgumentException("New data is validated against same as existing data");
                }   
                clearFields();
                populateTable();
            }
        
            
        }  
        catch (IllegalArgumentException e){
            if ("not selected any user to edit".equals(e.getMessage().toLowerCase())){
                JOptionPane.showMessageDialog(this, "Please Select any of the Users to Update","Data Updation Error",JOptionPane.ERROR_MESSAGE);
            }
            
            else{
                JOptionPane.showMessageDialog(this, "Please change the existing data before saving the details","Data Updation Error",JOptionPane.ERROR_MESSAGE);
            }
            
   
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_savebuttonActionPerformed
 public void populateTable(){
        try{
            this.users = DatabaseConnector.getAllusers();
            
            DefaultTableModel tableModel = (DefaultTableModel) userDataTable.getModel();
            tableModel.setRowCount(0);
            for (User u: users){
                
                String[] userData = {String.valueOf(u.getId()),u.getName(),String.valueOf(u.getAge())};
                tableModel.addRow(userData);
            }
            
            clearFields();
           
        }
        
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    private void clearFields(){
        
        nameTextField.setText("");
        ageTextField.setText("");
        selectedUser = null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ageTextField;
    private javax.swing.JButton deletebutton;
    private javax.swing.JButton editbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton savebutton;
    private javax.swing.JTable userDataTable;
    // End of variables declaration//GEN-END:variables
}
